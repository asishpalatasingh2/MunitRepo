<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="testquiz-suite.xml" />
	<munit:test name="testquizFlow-test" doc:id="3edc43e3-85db-4be1-b837-24c47b3774f8" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Flow Reference" doc:id="33a0ba02-d5b9-4fe1-b126-3e9190401ba4" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="3d5d4fd6-f068-4035-b344-d6f74350e729" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://testquizFlowtest\mock_payload.dwl')]" mediaType="application/java" encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://testquizFlowtest\mock_attributes.dwl')]" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="efe8b9dd-6d74-4366-8f60-5533e47bb349" >
				<munit:payload value="#[readUrl('classpath://testquizFlowtest\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://testquizFlowtest\set-event_attributes.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to testquizFlow" doc:id="88e5ad81-0025-4077-978d-d53aa4ae4113" name="testquizFlow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="4c233872-54b9-422a-aeee-c0c46567a5ae" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import testquizFlowtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="PrivateFlow-test" doc:id="9ca474b0-419a-4de3-a132-93bad5f2667a" >
		<munit:behavior >
			<munit:set-event doc:name="Set Input" doc:id="458a60b6-2bd5-422d-bc90-ee18e961691f" >
				<munit:payload value="#[output application/java --- readUrl('classpath://PrivateFlowtest\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/java" />
				<munit:attributes value="#[readUrl('classpath://PrivateFlowtest\set-event_attributes.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to PrivateFlow" doc:id="b9900c5b-7763-4703-bcd8-5c9b06f0d27b" name="PrivateFlow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="aab1bc95-db28-42e6-8535-944c8d1faa42" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import PrivateFlowtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>


</mule>
